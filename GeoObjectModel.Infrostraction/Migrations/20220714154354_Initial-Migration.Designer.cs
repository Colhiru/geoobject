// <auto-generated />
using System;
using GeoObjectModel.Infrostraction;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoObjectModel.Infrostraction.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220714154354_Initial-Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GeoObjectModel.Domain.GeographicalObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeoNameId")
                        .HasColumnType("int");

                    b.Property<Guid>("GeoNamesFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeoNamesFeauteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentGeoNameId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeoNamesFeatureId");

                    b.ToTable("GeographicalObjects");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeographicalObjectVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArchiveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuthoritativeKnowledgeSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GeographicalObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeographicalObjectId");

                    b.ToTable("GeographicalObjectVersions");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeometryVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArchiveTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("AreaVolue")
                        .HasColumnType("float");

                    b.Property<string>("BorderGeocodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GeographicalObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LowerRightCornerGeocode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NorthToSouthLength")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpperLeftCornerGeocode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<double>("WestToEastLength")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GeographicalObjectId");

                    b.ToTable("GeometryVersions");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeoNamesFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentsEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentsRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureKindNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureKindNameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureNameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeoNamesFeatureCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeoNamesFeatureKind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeoNamesFeatures");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.NeighboringObjectLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("A2BCornersOfTheEarth")
                        .HasColumnType("int");

                    b.Property<int>("A2BNumber")
                        .HasColumnType("int");

                    b.Property<int>("B2ACornersOfTheEarth")
                        .HasColumnType("int");

                    b.Property<int>("B2ANumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeographicalObjectAName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeographicalObjectBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighboringGeographicalObjectsInId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NeighboringGeographicalObjectsOutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NeighboringGeographicalObjectsInId");

                    b.HasIndex("NeighboringGeographicalObjectsOutId");

                    b.ToTable("NeighboringObjectLinks");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.ParentChildObjectLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildGeographicalObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompletelyIncludedFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GeographicalObjectChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeographicalObjectParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("IncludedPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentGeographicalObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeographicalObjectChildId");

                    b.HasIndex("GeographicalObjectParentId");

                    b.ToTable("ParentChildObjectLinks");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeographicalObject", b =>
                {
                    b.HasOne("GeoObjectModel.Domain.GeoNamesFeature", "GeoNamesFeature")
                        .WithMany("GeographicalObjects")
                        .HasForeignKey("GeoNamesFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeoNamesFeature");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeographicalObjectVersion", b =>
                {
                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "GetGeographicalObject")
                        .WithMany("GeographicalObjectVersions")
                        .HasForeignKey("GeographicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GetGeographicalObject");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeometryVersion", b =>
                {
                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "GetGeographicalObject")
                        .WithMany("GeometryVersions")
                        .HasForeignKey("GeographicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GetGeographicalObject");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.NeighboringObjectLink", b =>
                {
                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "NeighboringGeographicalObjectsIn")
                        .WithMany("NeighboringGeographicalObjectsIn")
                        .HasForeignKey("NeighboringGeographicalObjectsInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "NeighboringGeographicalObjectsOut")
                        .WithMany("NeighboringGeographicalObjectsOut")
                        .HasForeignKey("NeighboringGeographicalObjectsOutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NeighboringGeographicalObjectsIn");

                    b.Navigation("NeighboringGeographicalObjectsOut");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.ParentChildObjectLink", b =>
                {
                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "GeographicalObjectParent")
                        .WithMany("ParentGeographicalObjects")
                        .HasForeignKey("GeographicalObjectChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeoObjectModel.Domain.GeographicalObject", "GeographicalObjectChild")
                        .WithMany("ChildGeographicalObjects")
                        .HasForeignKey("GeographicalObjectParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeographicalObjectChild");

                    b.Navigation("GeographicalObjectParent");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeographicalObject", b =>
                {
                    b.Navigation("ChildGeographicalObjects");

                    b.Navigation("GeographicalObjectVersions");

                    b.Navigation("GeometryVersions");

                    b.Navigation("NeighboringGeographicalObjectsIn");

                    b.Navigation("NeighboringGeographicalObjectsOut");

                    b.Navigation("ParentGeographicalObjects");
                });

            modelBuilder.Entity("GeoObjectModel.Domain.GeoNamesFeature", b =>
                {
                    b.Navigation("GeographicalObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
